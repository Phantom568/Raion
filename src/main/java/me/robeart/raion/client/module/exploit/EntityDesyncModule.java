package me.robeart.raion.client.module.exploit;

import me.robeart.raion.client.events.EventStageable;
import me.robeart.raion.client.events.events.network.PacketReceiveEvent;
import me.robeart.raion.client.events.events.network.PacketSendEvent;
import me.robeart.raion.client.events.events.player.OnUpdateEvent;
import me.robeart.raion.client.managers.RotationManager;
import me.robeart.raion.client.module.Module;
import me.robeart.raion.client.value.BooleanValue;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CPacketInput;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.server.SPacketDestroyEntities;
import net.minecraft.network.play.server.SPacketSetPassengers;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;

public class EntityDesyncModule extends Module {
	
	//public final BooleanValue noStep = new BooleanValue("NoStep", false);
	public Entity entity;
	public BooleanValue move = new BooleanValue("Update Self", true);
	//public BooleanValue serverSide = new BooleanValue("Packet Self", true);
	public BooleanValue moveE = new BooleanValue("Update Entity", true);
	public BooleanValue serverSideE = new BooleanValue("Packet Entity", true);
	public EntityDesyncModule() {
		super("EntityDesync", "NONE", "Desyncs a rideable entity, allowing you to exploit it", Category.EXPLOIT);
	}
	
	@Override
	public void onEnable() {
		if (mc.player != null) {
			if (mc.player.getRidingEntity() != null) {
				entity = mc.player.getRidingEntity();
				mc.player.dismountRidingEntity();
				mc.world.removeEntity(entity);
			}
			else toggle();
		}
	}
	
	@Override
	public void onDisable() {
		if (mc.player != null) {
			if (entity != null && mc.player.getRidingEntity() == null) {
				entity.isDead = false;
				mc.world.spawnEntity(entity);
				mc.player.startRiding(entity, true);
				entity = null;
			}
		}
	}
	
	@Listener
	private void onUpdate(OnUpdateEvent event) {
		if (entity != null) {
			if (move.getValue()) {
				//We get our players rotation data to fill our rotation packet.
				RotationManager.INSTANCE.sendRotation(
					mc.player.rotationYaw,
					mc.player.rotationPitch,
					false
				);
				
				//We send a CPacketInput as it's normally send whilst riding an entity.
				CPacketInput InputPacket = new CPacketInput(
					mc.player.movementInput.moveStrafe,
					mc.player.movementInput.moveForward,
					mc.player.movementInput.jump,
					mc.player.movementInput.sneak
				);
				//We send the CPacketInput here.
				mc.player.connection.sendPacket(InputPacket);
			}
			if (moveE.getValue()) {
				//This is one the key features to godmode, it sets the entities position to your position to allow movement.
				entity.setPosition(
					mc.player.posX,
					mc.player.posY,
					mc.player.posZ
				);
			}
			if (serverSideE.getValue()) {
				//We send the CPacketInput here.
				mc.player.connection.sendPacket(new CPacketVehicleMove(entity));
			}
		}
		else toggle();
	}
	
	@Listener
	private void onPacketReceive(PacketReceiveEvent event) {
		if (event.getStage() != EventStageable.EventStage.PRE) return;
		if (event.getPacket() instanceof SPacketSetPassengers) {
			SPacketSetPassengers packet = (SPacketSetPassengers) event.getPacket();
			if (packet.getEntityId() == entity.getEntityId()) {
				int[] passengerids = packet.getPassengerIds();
				for (int i : packet.getPassengerIds()) {
					if (i == mc.player.getEntityId()) return;
				}
				entity.isDead = false;
				mc.world.spawnEntity(entity);
				entity = null;
				toggle();
				return;
			}
		}
		if (event.getPacket() instanceof SPacketDestroyEntities) {
			SPacketDestroyEntities packet = (SPacketDestroyEntities) event.getPacket();
			for (int i : packet.getEntityIDs()) {
				if (i == entity.getEntityId()) {
					entity = null;
					toggle();
					return;
				}
			}
		}
	}
	
	@Listener
	private void onPacketSend(PacketSendEvent event) {
		if (event.getStage() != EventStageable.EventStage.PRE) return;
		if (event.getPacket() instanceof CPacketPlayer.PositionRotation || event.getPacket() instanceof CPacketPlayer.Position) {
			if (entity != null) event.setCanceled(true);
		}
	}
    
    /*
        TODO: implement this
        No step logic:
        
        if(noStep.getValue()) {
            mc.player.stepHeight = 0;
            if(mc.player.getRidingEntity() != null)
                mc.player.getRidingEntity().stepHeight = 0;
        }
        else
        {
            mc.player.stepHeight = 0.6f;
            if(mc.player.getRidingEntity() != null)
                mc.player.getRidingEntity().stepHeight = 0.6f;
        }
     */
}

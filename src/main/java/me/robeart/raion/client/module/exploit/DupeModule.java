package me.robeart.raion.client.module.exploit;

import me.robeart.raion.client.events.events.client.GetKeyStateEvent;
import me.robeart.raion.client.events.events.network.PacketReceiveEvent;
import me.robeart.raion.client.events.events.player.OnUpdateEvent;
import me.robeart.raion.client.events.events.render.RenderEntityEvent;
import me.robeart.raion.client.module.Module;
import me.robeart.raion.client.util.ChatUtils;
import net.minecraft.entity.Entity;
import net.minecraft.network.play.client.CPacketChatMessage;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.util.math.BlockPos;
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener;

/**
 * @author Robeart
 */
public class DupeModule extends Module {
	
	private Entity entity;
	private boolean walk;
	private BlockPos goal;
	private BlockPos start;
	private float yaw;
	private double distanceTo;
	
	public DupeModule() {
		super("Dupe", "NONE", "Donkey Dupe", Category.EXPLOIT);
	}
	
	@Listener
	public void onPacket(PacketReceiveEvent event) {
		if (event.getPacket() instanceof CPacketConfirmTeleport) {
			mc.player.connection.sendPacket(new CPacketChatMessage("/kill"));
			this.setState(false);
		}
	}
	
	@Override
	public void onEnable() {
		if (mc.player != null) {
			start = mc.player.getPosition();
			goal = mc.player.getPosition().offset(mc.player.getHorizontalFacing(), 80);
			distanceTo = mc.player.getDistanceSq(goal);
			int angle = 360 / 90;
			float yaw = mc.player.rotationYaw;
			this.yaw = Math.round(yaw / angle) * angle;
			mc.player.rotationYaw = this.yaw;
			this.walk = true;
            /*if (mc.player.getRidingEntity() != null) {
                entity = mc.player.getRidingEntity();
                mc.player.dismountRidingEntity();
                mc.world.removeEntity(entity);
                mc.player.capabilities.isFlying = true;
                Vec3d dir = mc.player.getLookVec().normalize();
                start = mc.player.getPosition();
                goal = mc.player.getPosition().offset(mc.player.getHorizontalFacing(), 80);
                distanceTo = mc.player.getDistanceSq(goal);
                int angle = 360 / 90;
                float yaw = mc.player.rotationYaw;
                yaw = Math.round(yaw / angle) * angle;
                mc.player.rotationYaw = yaw;
                this.walk = true;
            } else toggle();*/
		}
	}
	
	@Listener
	private void onGetKeyState(GetKeyStateEvent event) {
		try {
			if (this.walk && event.keyBinding == mc.gameSettings.keyBindForward) event.value = true;
		}
		catch (Exception ignored) {
		}
	}
	
	@Override
	public void onDisable() {
		//BaritoneAPI.getProvider().getPrimaryBaritone().getPathingBehavior().cancelEverything();
        /*if (mc.player != null) {
            Entity entity = mc.player.getRidingEntity();
            if (entity != null) {
                mc.getConnection().sendPacket(new CPacketUseEntity(entity, EnumHand.MAIN_HAND));
            }
        }*/
	}
	
	@Listener
	private void onUpdate(OnUpdateEvent event) {
		if (walk) {
			mc.player.setSprinting(true);
			if (distanceTo < mc.player.getDistanceSq(goal)) {
				if (goal != start) {
					ChatUtils.message("Reached goal");
					mc.player.rotationYaw = yaw - 180;
					goal = start;
					distanceTo = mc.player.getDistanceSq(start);
				}
				else {
					ChatUtils.message("Reached start");
					mc.player.rotationYaw = yaw - 180;
					walk = false;
				}
			}
			else distanceTo = mc.player.getDistanceSq(goal);
		}
        /*if (entity != null) {
            entity.setPosition(mc.player.posX, mc.player.posY, mc.player.posZ);
            mc.getConnection().sendPacket(new CPacketVehicleMove(entity));
            if (mc.player.getRidingEntity() == null) {
                mc.player.noClip = true;
                mc.player.onGround = false;
            }
        }
        if (entity == null) {
            if (mc.player.getRidingEntity() instanceof AbstractHorse && mc.player.openContainer instanceof ContainerHorseInventory) {
                for (int i = 2; i < 17; i++) {
                    if (mc.player.openContainer.getInventory().get(i).getItem() != Items.AIR) {
                        mc.playerController.windowClick(mc.player.openContainer.windowId, i, 0, ClickType.PICKUP, mc.player);
                        mc.playerController.windowClick(mc.player.openContainer.windowId, -999, 0, ClickType.PICKUP, mc.player);
                    }
                }
            }
        }*/
	}
	
	@Listener
	private void onRenderEntity(RenderEntityEvent event) {
       /* if (event.getStage() == EventStageable.EventStage.POST) {
            if (event.getEntity() instanceof EntityPlayer) {
                if (entity != null) {
                    mc.player.capabilities.isFlying = false;
                    mc.player.noClip = false;
                    entity.isDead = false;
                    mc.world.loadedEntityList.add(entity);
                    mc.player.startRiding(entity, true);
                    entity = null;
                }
            }
        }*/
	}
}
